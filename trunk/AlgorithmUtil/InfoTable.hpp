/*
 * InfoTable.hpp
 * 
 * Copyright 2014 Allenc <allenhcchen@msi.com>
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301, USA.
 * 
 * 
 */

#ifndef INFOTABLE_HPP
#define INFOTABLE_HPP

#include <libplayerc++/playerc++.h>
#include <map>

namespace Algorithm {

  enum typeBehavior {
    BEHAVIOR_NONE = -1,
    BEHAVIOR_ESCAPE,
    BEHAVIOR_REMOTE,
    BEHAVIOR_DOCK,
    BEHAVIOR_ZIGZAG,
    BEHAVIOR_LOLLIPOP,
    BEHAVIOR_STC,
    BEHAVIOR_BOUNCE,
    BEHAVIOR_WALLFOLLOW,
    BEHAVIOR_EXPLORE,
    BEHAVIOR_SPIRAL,
    BEHAVIOR_MOVE2TARGET,
    BEHAVIOR_MAPPER,
    BEHAVIOR_EXAMPLE,
    BEHAVIOR_MAX_NUMBER,
    BEHAVIOR_PLANNER,
    BEHAVIOR_ALGORITHMTASK
  };

  typedef struct {
    int32_t debug;
    int32_t count;
    std::string name;
  }INFO_NODE;

  // INFO_NODE::debug in behavior_table
  // bits |2|1|0|
  //      |D|E|C|
  // D: Debug
  // E: Enable at startup
  // C: Created at startup
  static std::map<uint32_t, INFO_NODE> behavior_table = {
    {BEHAVIOR_ESCAPE, {0, 0, "BEHAVIOR_ESCAPE"}},
    {BEHAVIOR_REMOTE, {0, 0, "BEHAVIOR_REMOTE"}},
    {BEHAVIOR_DOCK, {0, 0, "BEHAVIOR_DOCK"}},
    {BEHAVIOR_ZIGZAG, {0, 0, "BEHAVIOR_ZIGZAG"}},
    {BEHAVIOR_LOLLIPOP, {0, 0, "BEHAVIOR_LOLLIPOP"}},
    {BEHAVIOR_STC, {0, 0, "BEHAVIOR_STC"}},
    {BEHAVIOR_BOUNCE, {0, 0, "BEHAVIOR_BOUNCE"}},
    {BEHAVIOR_WALLFOLLOW, {0, 0, "BEHAVIOR_WALLFOLLOW"}},
    {BEHAVIOR_EXPLORE, {0, 0, "BEHAVIOR_EXPLORE"}},
    {BEHAVIOR_SPIRAL, {0, 0, "BEHAVIOR_SPIRAL"}},
    {BEHAVIOR_MOVE2TARGET, {0, 0, "BEHAVIOR_MOVE2TARGET"}},
    {BEHAVIOR_MAPPER, {0, 0, "BEHAVIOR_MAPPER"}},
    {BEHAVIOR_EXAMPLE, {0, 0, "BEHAVIOR_EXAMPLE"}},
    {BEHAVIOR_PLANNER, {0, 0, "BEHAVIOR_PLANNER"}},
    {BEHAVIOR_ALGORITHMTASK, {0, 0, "BEHAVIOR_ALGORITHMTASK"}}
  };

  static std::map<uint32_t, INFO_NODE> sensor_table = {
    {FORWARD_RIGHT_CLIFF, {0, 0, "FORWARD_RIGHT_CLIFF"}},
    {FORWARD_FRONT_CLIFF, {0, 0, "FORWARD_FRONT_CLIFF"}}, 
    {FORWARD_LEFT_CLIFF, {0, 0, "FORWARD_LEFT_CLIFF"}}, 
    {REAR_RIGHT_CLIFF, {0, 0, "REAR_RIGHT_CLIFF"}}, 
    {REAR_LEFT_CLIFF, {0, 0, "REAR_LEFT_CLIFF"}}, 
    {RIGHT_WHEEL_OFFROAD, {0, 0, "RIGHT_WHEEL_OFFROAD"}}, 
    {LEFT_WHEEL_OFFROAD, {0, 0, "LEFT_WHEEL_OFFROAD"}}, 
    {BIN_IN, {0, 0, "BIN_IN"}}, 
    {BIN_COVER_IN, {0, 0, "BIN_COVER_IN"}}, 
    {BIN_FULL, {0, 0, "BIN_FULL"}}, 
    {DUST_IN, {0, 0, "DUST_IN"}}, 
    {ON_CARPET, {0, 0, "ON_CARPET"}}, 
    {RIGHT_WHEEL_MOTOR_OC, {0, 0, "RIGHT_WHEEL_MOTOR_OC"}}, 
    {LEFT_WHEEL_MOTOR_OC, {0, 0, "LEFT_WHEEL_MOTOR_OC"}}, 
    {MAINBRUSH_MOTOR_OC, {0, 0, "MAINBRUSH_MOTOR_OC"}}, 
    {VACUUM_OC, {0, 0, "VACUUM_OC"}}, 
    {RIGHT_SIDEBRUSH_MOTOR_OC, {0, 0, "RIGHT_SIDEBRUSH_MOTOR_OC"}}, 
    {LEFT_SIDEBRUSH_MOTOR_OC, {0, 0, "LEFT_SIDEBRUSH_MOTOR_OC"}}, 
    {DUST_SENSOR_DAMAGE, {0, 0, "DUST_SENSOR_DAMAGE"}}, 
    {RIGHT_WHEEL_QEP, {0, 0, "RIGHT_WHEEL_QEP"}}, 
    {LEFT_WHEEL_QEP, {0, 0, "LEFT_WHEEL_QEP"}}, 
    {RIGHT_BUMPER, {0, 0, "RIGHT_BUMPER"}}, 
    {FORWARD_BUMPER, {0, 0, "FORWARD_BUMPER"}}, 
    {LEFT_BUMPER, {0, 0, "LEFT_BUMPER"}}, 
    {IR_HAZARD_NUM, {0, 0, "KIDNAP"}}
  };
  // Cleans
  static std::map<uint32_t, INFO_NODE> clean_table = {
    {PLAYER_DISPATCH_AI_SLEEP, {0, 0, "PLAYER_DISPATCH_AI_SLEEP"}}, 
    {PLAYER_DISPATCH_AI_STANDBY, {0, 0, "PLAYER_DISPATCH_AI_STANDBY"}}, 
    {PLAYER_DISPATCH_AI_MOVE_FORWARD, {0, 0, "PLAYER_DISPATCH_AI_MOVE_FORWARD"}}, 
    {PLAYER_DISPATCH_AI_MOVE_FORWARD_SLOW, {0, 0, "PLAYER_DISPATCH_AI_MOVE_FORWARD_SLOW"}}, 
    {PLAYER_DISPATCH_AI_MOVE_MOVE_BACKWARD, {0, 0, "PLAYER_DISPATCH_AI_MOVE_MOVE_BACKWARD"}}, 
    {PLAYER_DISPATCH_AI_TURN_LEFT, {0, 0, "PLAYER_DISPATCH_AI_TURN_LEFT"}}, 
    {PLAYER_DISPATCH_AI_TURN_RIGHT, {0, 0, "PLAYER_DISPATCH_AI_TURN_RIGHT"}}, 
    {PLAYER_DISPATCH_AI_STOP, {0, 0, "PLAYER_DISPATCH_AI_STOP"}}, 
    {PLAYER_DISPATCH_AI_STOP_NOW, {0, 0, "PLAYER_DISPATCH_AI_STOP_NOW"}}, 
    {PLAYER_DISPATCH_AI_AUTO, {0, 0, "PLAYER_DISPATCH_AI_AUTO"}}, 
    {PLAYER_DISPATCH_AI_SPIRAL_SMALL, {0, 0, "PLAYER_DISPATCH_AI_SPIRAL_SMALL"}}, 
    {PLAYER_DISPATCH_AI_SPIRAL_LARGE, {0, 0, "PLAYER_DISPATCH_AI_SPIRAL_LARGE"}}, 
    {PLAYER_DISPATCH_AI_PCI_STILL, {0, 0, "PLAYER_DISPATCH_AI_PCI_STILL"}}, 
    {PLAYER_DISPATCH_AI_FIND_DOCK, {0, 0, "PLAYER_DISPATCH_AI_FIND_DOCK"}}, 
    {PLAYER_DISPATCH_AI_WALL_FOLLOW, {0, 0, "PLAYER_DISPATCH_AI_WALL_FOLLOW"}}, 
    {PLAYER_DISPATCH_AI_MOVE2TARGET, {0, 0, "PLAYER_DISPATCH_AI_MOVE2TARGET"}}, 
    {PLAYER_DISPATCH_AI_EXPLORE, {0, 0, "PLAYER_DISPATCH_AI_EXPLORE"}}, 
    {PLAYER_DISPATCH_AI_HANDLE_PARTICULAR_ZONE, {0, 0, "PLAYER_DISPATCH_AI_HANDLE_PARTICULAR_ZONE"}}, 
    {PLAYER_DISPATCH_AI_CORNER, {0, 0, "PLAYER_DISPATCH_AI_CORNER"}}, 
    {PLAYER_DISPATCH_AI_DEEP_CLEAN, {0, 0, "PLAYER_DISPATCH_AI_DEEP_CLEAN"}}, 
    {PLAYER_DISPATCH_AI_CARPET_CLEAN, {0, 0, "PLAYER_DISPATCH_AI_CARPET_CLEAN"}}, 
    {PLAYER_DISPATCH_AI_SLIDE_FROM_DOCK, {0, 0, "PLAYER_DISPATCH_AI_SLIDE_FROM_DOCK"}}, 
    {PLAYER_DISPATCH_AI_RESET_ERROR, {0, 0, "PLAYER_DISPATCH_AI_RESET_ERROR"}}
  };
  static std::map<uint32_t, INFO_NODE> power_table = {
    {PLAYER_DISPATCH_PM_AUTO, {0, 0, "PLAYER_DISPATCH_PM_AUTO"}}, 
    {PLAYER_DISPATCH_PM_TURBO, {0, 0, "PLAYER_DISPATCH_PM_TURBO"}}, 
    {PLAYER_DISPATCH_PM_NORMAL, {0, 0, "PLAYER_DISPATCH_PM_NORMAL"}}, 
    {PLAYER_DISPATCH_PM_WALK, {0, 0, "PLAYER_DISPATCH_PM_WALK"}}, 
    {PLAYER_DISPATCH_PM_TURBO_AIR_CLEAN, {0, 0, "PLAYER_DISPATCH_PM_TURBO_AIR_CLEAN"}}, 
    {PLAYER_DISPATCH_PM_NORMAL_AIR_CLEAN, {0, 0, "PLAYER_DISPATCH_PM_NORMAL_AIR_CLEAN"}}, 
    {PLAYER_DISPATCH_PM_STANDBY, {0, 0, "PLAYER_DISPATCH_PM_STANDBY"}}, 
    {PLAYER_DISPATCH_PM_DEEP_CLEAN, {0, 0, "PLAYER_DISPATCH_PM_DEEP_CLEAN"}}, 
    {PLAYER_DISPATCH_PM_CARPET_CLEAN, {0, 0, "PLAYER_DISPATCH_PM_CARPET_CLEAN"}}, 
    {PLAYER_DISPATCH_PM_VERY_LOW_POWER, {0, 0, "PLAYER_DISPATCH_PM_VERY_LOW_POWER"}}, 
    {PLAYER_DISPATCH_PM_SLEEP, {0, 0, "PLAYER_DISPATCH_PM_SLEEP"}}, 
    {PLAYER_DISPATCH_PM_ON_CHARGER, {0, 0, "PLAYER_DISPATCH_PM_ON_CHARGER"}}, 
    {PLAYER_DISPATCH_PM_CHARGE, {0, 0, "PLAYER_DISPATCH_PM_CHARGE"}}, 
    {PLAYER_DISPATCH_PM_CHARGE_FULL, {0, 0, "PLAYER_DISPATCH_PM_CHARGE_FULL"}}
  };
  static std::map<uint32_t, INFO_NODE> error_table = {
    // Errors
    {PLAYER_DISPATCH_NO_ERROR, {0, 0, "NO_ERROR"}}, 
    {PLAYER_DISPATCH_NO_BATTERY_ERROR, {0, 0, "NO_BATTERY_ERROR"}}, 
    {PLAYER_DISPATCH_BATTERY_OVER_HEAT_ERROR, {0, 0, "BATTERY_OVER_HEAT_ERROR"}}, 
    {PLAYER_DISPATCH_CHARGING_TIMEOUT_ERROR, {0, 0, "CHARGING_TIMEOUT_ERROR"}}, 
    {PLAYER_DISPATCH_CHARGING_ERROR, {0, 0, "CHARGING_ERROR"}}, 
    
    /* [2xx] Front side sensor */
    {PLAYER_DISPATCH_FORWARD_CLIFF_ERROR, {0, 0, "FORWARD_CLIFF_ERROR"}}, 
    {PLAYER_DISPATCH_MAINBRUSH_OC_ERROR, {0, 0, "MAINBRUSH_OC_ERROR"}}, 
    {PLAYER_DISPATCH_MAINBRUSH_CIRCUIT_ERROR, {0, 0, "MAINBRUSH_CIRCUIT_ERROR"}}, 
    {PLAYER_DISPATCH_MAINBRUSH_QEP_ERROR, {0, 0, "MAINBRUSH_QEP_ERROR"}}, 
    
    /* [3xx] Left side sensor */
    {PLAYER_DISPATCH_FORWARD_LEFT_CLIFF_ERROR, {0, 0, "FORWARD_LEFT_CLIFF_ERROR"}}, 
    {PLAYER_DISPATCH_REAR_LEFT_CLIFF_ERROR, {0, 0, "REAR_LEFT_CLIFF_ERROR"}}, 
    {PLAYER_DISPATCH_LEFT_BUMPER_ERROR, {0, 0, "LEFT_BUMPER_ERROR"}}, 
    {PLAYER_DISPATCH_LEFT_SIDEBRUSH_OC_ERROR, {0, 0, "LEFT_SIDEBRUSH_OC_ERROR"}}, 
    {PLAYER_DISPATCH_LEFT_SIDEBRUSH_CIRCUIT_ERROR, {0, 0, "LEFT_SIDEBRUSH_CIRCUIT_ERROR"}}, 
    {PLAYER_DISPATCH_LEFT_SIDEBRUSH_QEP_ERROR, {0, 0, "LEFT_SIDEBRUSH_QEP_ERROR"}}, 
    {PLAYER_DISPATCH_LEFT_WHEEL_OC_ERROR, {0, 0, "LEFT_WHEEL_OC_ERROR"}}, 
    {PLAYER_DISPATCH_LEFT_WHEEL_CIRCUIT_ERROR, {0, 0, "LEFT_WHEEL_CIRCUIT_ERROR"}}, 
    {PLAYER_DISPATCH_LEFT_WHEEL_QEP_ERROR, {0, 0, "LEFT_WHEEL_QEP_ERROR"}}, 
    {PLAYER_DISPATCH_LEFT_WHEEL_DROP_ERROR, {0, 0, "LEFT_WHEEL_DROP_ERROR"}}, 
    
    /* [4xx] Right side sensor */
    {PLAYER_DISPATCH_FORWARD_RIGHT_CLIFF_ERROR, {0, 0, "FORWARD_RIGHT_CLIFF_ERROR"}}, 
    {PLAYER_DISPATCH_REAR_RIGHT_CLIFF_ERROR, {0, 0, "REAR_RIGHT_CLIFF_ERROR"}}, 
    {PLAYER_DISPATCH_RIGHT_BUMPER_ERROR, {0, 0, "RIGHT_BUMPER_ERROR"}}, 
    {PLAYER_DISPATCH_RIGHT_SIDEBRUSH_OC_ERROR, {0, 0, "RIGHT_SIDEBRUSH_OC_ERROR"}}, 
    {PLAYER_DISPATCH_RIGHT_SIDEBRUSH_CIRCUIT_ERROR, {0, 0, "RIGHT_SIDEBRUSH_CIRCUIT_ERROR"}}, 
    {PLAYER_DISPATCH_RIGHT_SIDEBRUSH_QEP_ERROR, {0, 0, "RIGHT_SIDEBRUSH_QEP_ERROR"}}, 
    {PLAYER_DISPATCH_RIGHT_WHEEL_OC_ERROR, {0, 0, "RIGHT_WHEEL_OC_ERROR"}}, 
    {PLAYER_DISPATCH_RIGHT_WHEEL_CIRCUIT_ERROR, {0, 0, "RIGHT_WHEEL_CIRCUIT_ERROR"}}, 
    {PLAYER_DISPATCH_RIGHT_WHEEL_QEP_ERROR, {0, 0, "RIGHT_WHEEL_QEP_ERROR"}}, 
    {PLAYER_DISPATCH_RIGHT_WHEEL_DROP_ERROR, {0, 0, "RIGHT_WHEEL_DROP_ERROR"}}, 
    
    /* [5xx] Other sensors */
    {PLAYER_DISPATCH_BIN_ERROR, {0, 0, "BIN_ERROR"}}, 
    {PLAYER_DISPATCH_BINFULL_ERROR, {0, 0, "BINFULL_ERROR"}}, 
    {PLAYER_DISPATCH_BIN_COVER_ERROR, {0, 0, "BIN_COVER_ERROR"}}, 
    {PLAYER_DISPATCH_DUSTSENSOR_ERROR, {0, 0, "DUSTSENSOR_ERROR"}}, 
    {PLAYER_DISPATCH_MORE_CLIFF_ERROR, {0, 0, "MORE_CLIFF_ERROR"}}, 
    {PLAYER_DISPATCH_KIDNAPP_ERROR, {0, 0, "KIDNAPP_ERROR"}}, 
    
    /* [6xx] Laser sensor */
    {PLAYER_DISPATCH_LASER_IMAGE_SENSOR_ERROR, {0, 0, "LASER_IMAGE_SENSOR_ERROR"}}, 
    {PLAYER_DISPATCH_LASER_MOTOR_ERROR, {0, 0, "LASER_MOTOR_ERROR"}}, 
    {PLAYER_DISPATCH_LASER_CIRCUIT_ERROR, {0, 0, "LASER_CIRCUIT_ERROR"}}, 
    {PLAYER_DISPATCH_LASER_DIODE_ERROR, {0, 0, "LASER_DIODE_ERROR"}}, 
    
    /* [9xx] Boot sensors */
    {PLAYER_DISPATCH_BOOT_FORWARD_CLIFF_ERROR, {0, 0, "BOOT_FORWARD_CLIFF_ERROR"}}, 
    {PLAYER_DISPATCH_BOOT_FORWARD_LEFT_CLIFF_ERROR, {0, 0, "BOOT_FORWARD_LEFT_CLIFF_ERROR"}}, 
    {PLAYER_DISPATCH_BOOT_FORWARD_RIGHT_CLIFF_ERROR, {0, 0, "BOOT_FORWARD_RIGHT_CLIFF_ERROR"}}, 
    {PLAYER_DISPATCH_BOOT_REAR_LEFT_CLIFF_ERROR, {0, 0, "BOOT_REAR_LEFT_CLIFF_ERROR"}}, 
    {PLAYER_DISPATCH_BOOT_REAR_RIGHT_CLIFF_ERROR, {0, 0, "BOOT_REAR_RIGHT_CLIFF_ERROR"}}, 
    {PLAYER_DISPATCH_BOOT_LEFT_BUMPER_ERROR, {0, 0, "BOOT_LEFT_BUMPER_ERROR"}}, 
    {PLAYER_DISPATCH_BOOT_RIGHT_BUMPER_ERROR, {0, 0, "BOOT_RIGHT_BUMPER_ERROR"}}, 
    {PLAYER_DISPATCH_BOOT_BIN_ERROR, {0, 0, "BOOT_BIN_ERROR"}}, 
    {PLAYER_DISPATCH_BOOT_BIN_COVER_ERROR, {0, 0, "BOOT_BIN_COVER_ERROR"}}, 
    {PLAYER_DISPATCH_BOOT_LEFT_WHEEL_DROP_ERROR, {0, 0, "BOOT_LEFT_WHEEL_DROP_ERROR"}}, 
    {PLAYER_DISPATCH_BOOT_RIGHT_WHEEL_DROP_ERROR, {0, 0, "BOOT_RIGHT_WHEEL_DROP_ERROR"}}
  };
}

#endif

